{% include "scheduler/ai.sh.in" %}
{% include "runtime.sh.in" %}
{% bind_user_share_folder as job_user_share_folder %}
{% settings as settings %}
module try-load singularity
echo job start time is `date`


{%if distributed and distributed_mode == 'ps'%}
echo "PS mode"

ps_num={{ ps_worker|get_item:"psNumber"|default_if_none:2 }}
worker_num={{ ps_worker|get_item:"workerNumber"|default:4 }}
distributed_args={{ distributed_args|default:""|addslashes }}
{% get_exec_node settings.LICO.SCHEDULER 1 %}

{% if nodes == 1 %}

echo "ps_num:$ps_num  worker_num:$worker_num"

{% elif nodes > 1 %}

export LICO_AVAILABLE_PORTS=@@{lico_port1_{% sum_items ps_worker|get_item:"psNumber"|default_if_none:2 ps_worker|get_item:"workerNumber"|default:4 %}}
lico_ports_array=(`echo $LICO_AVAILABLE_PORTS | tr ','  ' '`)


port_index=0

function get_ps_worker_hosts(){
    num=$1
    ret=''
    while(( $num>0 ))
    do
        for exec_node in ${exec_nodes[*]}
        do
            if [ $num == 0 ]
            then
                break
            fi
            exec_node_ip=`ping -c 1 ${exec_node} | head -n 1 | tr '()' ' '|awk '{print $3}'`
            if [ ${#ret} -gt 0 ]
            then
                ret="${ret},${exec_node_ip}:${lico_ports_array[$port_index]}"
            else
                ret="${exec_node_ip}:${lico_ports_array[$port_index]}"
            fi
            let "port_index++"
            let "num--"
        done
    done
}

get_ps_worker_hosts $ps_num
ps_hosts=$ret

get_ps_worker_hosts $worker_num
worker_hosts=$ret

echo "ps:$ps_hosts  worker:$worker_hosts"

{%endif%}


function run_ps_worker(){
    if [ {{nodes}} == 1 ]
    then
        set -x
        {% scheduler_exec settings.LICO.SCHEDULER gpu_per_node gpu_per_node 0 %}${exec_nodes[0]} \
                        singularity exec {% if gpu_per_node %}--nv{% endif %} \
                        -B {{ lico.user.workspace|addslashes }} {{ job_user_share_folder|addslashes }} \
                        --pwd {{ job_workspace }} \
                        {{ image_path }} \
                        {% program_exec prog " -m paddle.distributed.launch --server_num=$ps_num --worker_num=$worker_num $distributed_args " %} \
                        {{ args|default:""|addslashes }} &
        set +x
    else
        for exec_node in ${exec_nodes[*]}
        do
            set -x
            {% scheduler_exec settings.LICO.SCHEDULER gpu_per_node gpu_per_node 0 %}$exec_node \
                singularity exec {% if gpu_per_node %}--nv{% endif %} \
                -B {{ lico.user.workspace|addslashes }} {{ job_user_share_folder|addslashes }} \
                --pwd {{ job_workspace }} \
                {{ image_path }} \
                {% program_exec prog " -m paddle.distributed.launch --servers=$ps_hosts --workers=$worker_hosts --log_dir=log/$exec_node $distributed_args " %} \
                {{ args|default:""|addslashes }} &
            set +x
            let "num--"
        done
    fi
}

run_ps_worker

wait


{%elif distributed and distributed_mode == 'collective'%}
echo "collective mode"
echo "NCCL_SOCKET_IFNAME:$NCCL_SOCKET_IFNAME"

distributed_args={{ distributed_args|default:""|addslashes }}
{% get_exec_node settings.LICO.SCHEDULER 1 %}

{% if nodes == 1 %}

echo "nodes:$nodes"

{% elif nodes > 1 %}


function get_collective_ips(){
    ret=''
    for exec_node in ${exec_nodes[*]}
    do
        if [ $num == 0 ]
        then
            break
        fi
        exec_node_ip=`ping -c 1 ${exec_node} | head -n 1 | tr '()' ' '|awk '{print $3}'`
        if [ ${#ret} -gt 0 ]
        then
            ret="${ret},${exec_node_ip}"
        else
            ret="${exec_node_ip}"
        fi
        let "num--"
    done
}

get_collective_ips
collective_ips=$ret

echo "collective_ips:$collective_ips"

{%endif%}


function run_collective(){
    if [ {{nodes}} == 1 ]
    then
        set -x
        {% scheduler_exec settings.LICO.SCHEDULER gpu_per_node gpu_per_node 0 %}${exec_nodes[0]} \
                        singularity exec {% if gpu_per_node %}--nv{% endif %} \
                        -B {{ lico.user.workspace|addslashes }} {{ job_user_share_folder|addslashes }} \
                        --pwd {{ job_workspace }} \
                        {{ image_path }} \
                        {% program_exec prog " -m paddle.distributed.launch $distributed_args " %} \
                        {{ args|default:""|addslashes }} &
        set +x
    else
        for exec_node in ${exec_nodes[*]}
        do
            set -x
            {% scheduler_exec settings.LICO.SCHEDULER gpu_per_node gpu_per_node 0 %}$exec_node \
                singularity exec {% if gpu_per_node %}--nv{% endif %} \
                -B {{ lico.user.workspace|addslashes }} {{ job_user_share_folder|addslashes }} \
                --pwd {{ job_workspace }} \
                --env NCCL_SOCKET_IFNAME=$NCCL_SOCKET_IFNAME \
                {{ image_path }} \
                {% program_exec prog " -m paddle.distributed.launch --ips=$collective_ips --log_dir=log/$exec_node $distributed_args " %} \
                {{ args|default:""|addslashes }} &
            set +x
            let "num--"
        done
    fi
}

run_collective

wait


{%else%}
{% get_exec_node settings.LICO.SCHEDULER 0 %}
set -x
{% scheduler_exec settings.LICO.SCHEDULER gpu_per_node gpu_per_node|default:0 1 %}${exec_node} \{% if settings.LICO.SCHEDULER == "slurm" %}
    --cpus-per-task=${cpu_curr_node} \{% endif %}
    singularity exec {% if gpu_per_node %}--nv{% endif %} \
    -B {{ lico.user.workspace|addslashes }} {{ job_user_share_folder|addslashes }} \
    --pwd {{ job_workspace }} \
    {{ image_path }} {% program_exec prog %} {{ args|default:""|addslashes }}
set +x
{%endif%}
echo job end time is `date`
