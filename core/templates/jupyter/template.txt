{% include "scheduler/ai.sh.in" %}
port={{ lico.port0 }}
host_addr=`hostname -i`
url_suffix=`perl -e '
    use Socket;
    use MIME::Base64;
    print(MIME::Base64::encode_base64url("'$host_addr'".":"."'$port'"))
'`

if [ -z $url_suffix ]
then
    echo url_suffix is empty, please check system environment
    echo job end time is `date`
    exit -1
fi

passwd() {
  passphrase="{{ password }}"
  algorithm="sha1"
  salt_len=12
  salt=$(printf "%0${salt_len}x" $(( RANDOM % (16**${salt_len}) )) )
  h=$(printf "${passphrase}${salt}" | openssl dgst -${algorithm} -binary | xxd -p)
  echo "${algorithm}:${salt}:${h}"
}

mypassword=$(passwd)

module try-load singularity
{% if jupyter_cmd == '' %}
    singularity exec -B {{ lico.user.workspace }} {% bind_user_share_folder %} \
        {% if gpu_per_node %}--nv {% endif %} \
        {{ image_path }} /opt/start \
        --port $port \
        --workdir {{ project_workspace }} \
        --password $mypassword \
        --conda_env '{{ persistent_dir|addslashes }}' \
        --base_url /dev/jupyter/$url_suffix/{{ job_uuid }}/ \
        {% if check_timeout and jupyter_timeout %}--jupyter_timeout {{jupyter_timeout}} \{% endif %}
        {% if check_timeout and kernel_timeout %}--kernel_timeout {{kernel_timeout}} \{% endif %}
        {% if check_timeout and terminal_timeout %}--terminal_timeout {{terminal_timeout}} {% endif %}
{% else %}
    singularity exec -B {{ lico.user.workspace }} {% bind_user_share_folder %} \
        {% if gpu_per_node %}--nv{% endif %} \
        {{ image_path }} {{ jupyter_cmd }} \
        --ip=0.0.0.0 \
        --port=$port \
        --NotebookApp.port_retries=0 \
        --NotebookApp.password=$mypassword \
        --NotebookApp.allow_origin='*' \
        --no-browser \
        --NotebookApp.allow_remote_access=True \
        --NotebookApp.disable_check_xsrf=True \
        --NotebookApp.notebook_dir={{ project_workspace }} \
        --NotebookApp.base_url=/dev/jupyter/$url_suffix/{{ job_uuid }}/ \
        {% if check_timeout and jupyter_timeout %}--NotebookApp.shutdown_no_activity_timeout={{jupyter_timeout}} \{% endif %}
        {% if check_timeout and kernel_timeout %}--MappingKernelManager.cull_idle_timeout={{kernel_timeout}} \{% endif %}
        {% if check_timeout and terminal_timeout %}--TerminalManager.cull_inactive_timeout={{terminal_timeout}} {% endif %}
{% endif %}

echo job end time is `date`
